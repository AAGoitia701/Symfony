üî• Plan de Estudios Personalizado ‚Äì Andrea
Duraci√≥n: 6 meses (24 semanas) + M√≥dulo extra obligatorio (Semana 25)
Horario estimado: 1‚Äì2 horas al d√≠a
Objetivo general: Convertirte en una backend dev PRO: Symfony, PHP, arquitectura, Docker/infra, seguridad, testing, frontend funcional (Twig + Vue b√°sico), CI/CD y mensajer√≠a (RabbitMQ).

C√≥mo usarlo: trabaja una semana a la vez. Cada semana: 3‚Äì5 lecturas/cap√≠tulos + 2 ejercicios pr√°cticos (uno obligatorio, otro opcional). Marca checklist y resume en ‚ÄúNotas personales‚Äù.

Mes 1 ‚Äî Fundamentos s√≥lidos de Symfony y PHP
Meta mensual: dominar la base de Symfony, servicios, routing, controladores y Doctrine b√°sico. Mini-proyecto del mes: una app de Blog/Art√≠culos b√°sica (CRUD) para iterar cada mes.

Semana 1 ‚Äî Routing, controladores, requests & responses
Objetivo: entender rutas, controladores, requests y responses.
Lecturas / recursos:

Symfony Docs: Routing & Controllers ‚Äî https://symfony.com/doc/current/routing.html / https://symfony.com/doc/current/controller.html
Ejercicios (obligatorio):

Crear proyecto Symfony (si no lo tienes): symfony new blog --webapp o composer create-project symfony/skeleton blog.

Implementar ruta / y /article/{slug} que muestre un art√≠culo de prueba.
Ejercicio (opcional):

A√±adir manejo de 404 personalizado.
Mini-tarea diaria: 1) Leer secci√≥n; 2) Implementar; 3) comentar 3 dudas en notas.

Semana 2 ‚Äî Servicios, DI, par√°metros y contenedores
Objetivo: comprender inyecci√≥n de dependencias y servicios.
Recursos:

Symfony Services & Dependency Injection ‚Äî https://symfony.com/doc/current/service_container.html
Ejercicios (obligatorio):

Crear un servicio App\Service\ArticleFormatter y usarlo desde un controlador.
Opcional:

Configurar par√°metro en services.yaml y probar override por env.
Tip: Es la base de todo‚Äîhaz tests manuales para ver c√≥mo se inyecta.

Semana 3 ‚Äî Doctrine ORM b√°sico: entidades, migraciones y relaciones simples
Objetivo: manejar entidades, migrations y operaciones CRUD con Doctrine.
Recursos:

Doctrine basics ‚Äî https://symfony.com/doc/current/doctrine.html
Ejercicios (obligatorio):

Crear entidad Article (id, title, slug, content, created_at). Crear migraci√≥n y poblar DB con fixtures.

Implementar listado de art√≠culos en Twig.
Opcional: A√±adir validaciones con Assert.

Semana 4 ‚Äî Formularios, validaci√≥n y seguridad b√°sica
Objetivo: formularios en Symfony y validaci√≥n.
Recursos:

Symfony Forms & Validation ‚Äî https://symfony.com/doc/current/forms.html / https://symfony.com/doc/current/validation.html
Ejercicios (obligatorio):

Crear formulario para crear/editar art√≠culos con validaci√≥n.
Opcional:

Implementar protecci√≥n CSRF (viene por defecto en Forms) y explicar c√≥mo funciona en tus notas.

Mes 2 ‚Äî Docker y entorno de desarrollo profesional
Meta mensual: Dockerizar tu aplicaci√≥n (Nginx, PHP-FPM, MySQL, Redis), dominar docker-compose.

Semana 5 ‚Äî Fundamentos Docker: im√°genes, contenedores, vol√∫menes
Objetivo: entender imagen vs contenedor vs volumen.
Recursos:

Docker docs (Get Started) ‚Äî https://docs.docker.com/get-started/
Ejercicios (obligatorio):

Escribir Dockerfile para la app PHP que ejecute php -v y composer install.
Opcional: Jugar con docker run y ver containers listados (docker ps).

Semana 6 ‚Äî docker-compose: servicios, redes y variables de entorno
Objetivo: orquestar contenedores locales.
Recursos:

Compose docs ‚Äî https://docs.docker.com/compose/
Ejercicios (obligatorio):

Crear docker-compose.yml con servicios: app (php-fpm), nginx, db (mysql:8), redis.

Levantar docker-compose up -d y comprobar logs.
Opcional: A√±adir volumen para c√≥digo y depends_on.

Semana 7 ‚Äî Symfony en Docker: configurar Nginx + PHP-FPM + Xdebug
Objetivo: ejecutar Symfony dentro de contenedores y debug remoto.
Recursos:

Ejemplo Symfony + Docker (buscar repos con docker-compose y Symfony)
Ejercicios (obligatorio):

Integrar Nginx config para servir Symfony (root /var/www/public).

Configurar Xdebug (puerto mapping) y probar breakpoints desde tu IDE en Windows.
Opcional: Probar docker exec -it para entrar al contenedor app.

Semana 8 ‚Äî Optimizaci√≥n local: cache, logs y rendimiento
Objetivo: buenas pr√°cticas de contenedores locales, cach√© y configuraci√≥n php.ini relevante.
Recursos:

PHP performance tuning docs (opcache, realpath cache)
Ejercicios (obligatorio):

Activar OPcache en tu contenedor PHP y medir tiempo de ejecuci√≥n de una ruta con y sin OPcache.

Configurar shm_size si hace falta (tu entorno local lo usa).
Opcional: Integrar Redis para cache de sesi√≥n.

Mes 3 ‚Äî Arquitectura, patrones y dise√±o de c√≥digo
Meta mensual: entender SOLID, Clean Architecture, DDD b√°sico y aplicar a tu proyecto.

Semana 9 ‚Äî Principios SOLID y Clean Code
Objetivo: conocer SOLID y aplicar SRP.
Recursos:

Refactoring.guru - SOLID ‚Äî https://refactoring.guru/es/design-patterns/solid
Ejercicios (obligatorio):

Identificar una clase grande (o servicio) y refactorizarla en 2 servicios con SRP.
Opcional: A√±adir interfaces y tipos estrictos.

Semana 10 ‚Äî Capas: dominio, aplicaci√≥n, infraestructura (Hexagonal / Ports & Adapters)
Objetivo: separar l√≥gica de dominio del framework.
Recursos:

Intro Hexagonal / Ports & Adapters (art√≠culos)
Ejercicios (obligatorio):

Crear un Service/UseCase para ‚ÄúPublicar art√≠culo‚Äù que solo dependa de una interface ArticleRepositoryInterface, implementar el repo con Doctrine en infraestructura.
Opcional: Documentar el flujo en un diagrama simple.

Semana 11 ‚Äî DTOs, Value Objects y Anti-Corruption Layer
Objetivo: usar DTOs y VO para mantener l√≠mites claros.
Recursos:

Ejemplos DDD en PHP (busca art√≠culos/ejemplos "Value Object PHP")
Ejercicios (obligatorio):

Implementar DTO para la creaci√≥n de art√≠culo y mapearlo en el handler/usecase.
Opcional: A√±adir ValueObject para Slug (validaci√≥n y formato).

Semana 12 ‚Äî Patrones comunes: Strategy, Factory, Repository y Command Bus
Objetivo: aplicar patrones √∫tiles para c√≥digo escalable.
Recursos:

Refactoring.Guru (patrones)
Ejercicios (obligatorio):

Implementar un Factory para crear Article con ciertos defaults.
Opcional: Integrar un simple Command Bus (puedes usar symfony/messenger en modo sync aqu√≠).

Mes 4 ‚Äî Testing y Seguridad Web (complemento al m√°ster)
Meta mensual: tests unitarios/funcionales y cubrir OWASP Top 10 b√°sicos en tu app.

Semana 13 ‚Äî PHPUnit: Unit tests
Objetivo: aprender a testear servicios con PHPUnit.
Recursos:

PHPUnit docs ‚Äî https://phpunit.de/getting-started.html
Ejercicios (obligatorio):

Escribir tests unitarios para ArticleFormatter y para un UseCase.
Opcional: Integrar phpunit.xml y coverage b√°sica.

Semana 14 ‚Äî Functional tests y Browser tests (Symfony)
Objetivo: usar KernelTestCase y WebTestCase.
Recursos:

Symfony testing docs ‚Äî https://symfony.com/doc/current/testing.html
Ejercicios (obligatorio):

Crear test funcional que compruebe que la ruta /article/{slug} responde 200 y renderiza t√≠tulo.
Opcional: Usar Panther/BrowserKit para pruebas end-to-end (explora).

Semana 15 ‚Äî Seguridad en aplicaciones web (OWASP Top 10)
Objetivo: saber las vulnerabilidades comunes y c√≥mo mitigarlas.
Recursos:

OWASP Top 10 & Cheatsheets ‚Äî https://cheatsheetseries.owasp.org/
Ejercicios (obligatorio):

Revisar tu app por inyecciones SQL, XSS y CSRF (crear ejemplos y arreglarlos).
Opcional: Implementar CSP headers y revisar seguridad de cookies.

Semana 16 ‚Äî Autenticaci√≥n y autorizaci√≥n avanzadas (roles, voters)
Objetivo: dominar firewalls, providers, encoders y voters.
Recursos:

Symfony Security ‚Äî https://symfony.com/doc/current/security.html
Ejercicios (obligatorio):

Implementar login + ROLE_ADMIN y proteger rutas de administraci√≥n.
Opcional: Crear un Voter para control de edici√≥n de art√≠culos por autor.

Mes 5 ‚Äî APIs, integraciones y Frontend funcional
Meta mensual: construir una API RESTful, integrarla con frontend ligero (Twig + Vue) y gestionar autenticaci√≥n API (JWT).

Semana 17 ‚Äî Dise√±o RESTful y API basics
Objetivo: entender dise√±o de recursos, status codes, paginaci√≥n.
Recursos:

Art√≠culos REST best practices; RFCs b√°sicos.
Ejercicios (obligatorio):

Crear endpoints JSON para GET /api/articles, POST /api/articles.
Opcional: A√±adir paginaci√≥n y filtros.

Semana 18 ‚Äî API Platform (opcional) o API manual con Symfony
Objetivo: conocer API Platform y c√≥mo exponer entidades r√°pidamente.
Recursos:

API Platform docs ‚Äî https://api-platform.com/docs/
Ejercicios (obligatorio):

Implementar endpoint protegido y documentado (Swagger/OpenAPI).
Opcional: Usar API Platform para CRUD.

Semana 19 ‚Äî Autenticaci√≥n API: JWT / OAuth basics
Objetivo: asegurar API con JWT (lexik/jwt-authentication-bundle) o similar.
Recursos:

LexikJWT bundle guide / oauth docs
Ejercicios (obligatorio):

Implementar login que devuelve token JWT y proteger endpoint con Authorization: Bearer.
Opcional: Implementar refresh tokens (si te apetece).

Semana 20 ‚Äî Frontend funcional: Twig + Vue (integraci√≥n)
Objetivo: a√±adir interactividad ligera con Vue sobre templates Twig.
Recursos:

Twig docs ‚Äî https://twig.symfony.com/doc/3.x/

Vue 3 Guide ‚Äî https://vuejs.org/guide/introduction.html
Ejercicios (obligatorio):

En la vista de listado de art√≠culos (Twig) integra un componente Vue que filtre art√≠culos en cliente (sin recargar).
Opcional: Implementar un peque√±o componente que cree comentario v√≠a AJAX a la API.

Mes 6 ‚Äî DevOps b√°sico, despliegue y consolidaci√≥n
Meta mensual: entender Nginx, reverse proxy, CI/CD b√°sico y desplegar versi√≥n simple (simulada) con GitHub Actions.

Semana 21 ‚Äî Nginx como reverse proxy y configuraci√≥n b√°sica
Objetivo: entender bloques server, location y proxy_pass.
Recursos:

DigitalOcean Nginx tutorials ‚Äî https://www.digitalocean.com/community/tutorials/nginx-configuration
Ejercicios (obligatorio):

Crear configuraci√≥n Nginx para servir public/ y proxy_pass a PHP-FPM.
Opcional: Configurar HTTPS con Let's Encrypt (simulado o en un dominio de pruebas).

Semana 22 ‚Äî CI/CD b√°sico con GitHub Actions
Objetivo: pipeline que corre tests y linters en cada push.
Recursos:

GitHub Actions docs ‚Äî https://docs.github.com/en/actions
Ejercicios (obligatorio):

Crear .github/workflows/ci.yml que: instala deps, corre phpunit y phpstan (o php-cs-fixer).
Opcional: A√±adir job que construya imagen Docker y la suba a un registry (simulado).

Semana 23 ‚Äî Logs, monitoreo b√°sico y alertas (introducci√≥n)
Objetivo: aprender a recoger logs y m√©tricas b√°sicas.
Recursos:

Introducci√≥n a Prometheus & Grafana (lectura)
Ejercicios (obligatorio):

Configurar logs de Symfony (monolog) a fichero y a stdout (docker-friendly).
Opcional: Usar contenedores prometheus/grafana localmente para visualizar m√©tricas b√°sicas (si te apetece).

Semana 24 ‚Äî Proyecto final: consolidaci√≥n y entrega
Objetivo: unir todo: app dockerizada, tests, seguridad, API y frontend funcional.
Tareas obligatorias:

Dockerizar app completa con docker-compose (php, nginx, mysql, redis).

A√±adir CI b√°sico que corra tests en push.

Documentar README con pasos para levantar localmente.
Opcional (reto ninja):

Hacer deploy en un servidor cloud sencillo (DigitalOcean droplet) o usar Railway/Render/Heroku.

Semana 25 ‚Äî M√≥dulo Extra Obligatorio: RabbitMQ + Symfony Messenger (¬°obligatorio!)
Objetivo: entender mensajer√≠a as√≠ncrona y usar RabbitMQ con Symfony Messenger.

Lecturas / recursos:

Symfony Messenger docs ‚Äî https://symfony.com/doc/current/messenger.html

RabbitMQ docs intro ‚Äî https://www.rabbitmq.com/getstarted.html

Contenidos pr√°cticos:

Levantar RabbitMQ en Docker (rabbitmq:3-management) y acceder al panel.

Configurar messenger.yaml para usar transport amqp://.

Crear Message (DTO), MessageHandler y dispatch desde controladores.

Levantar worker: php bin/console messenger:consume async -vv

Retries, failure transports, middlewares.

Ejercicio obligatorio:

Implementar cola de env√≠o de emails:

Endpoint que dispatch un SendEmailMessage.

SendEmailHandler que simula env√≠o (o usa Mailcatcher).

Worker que consume y registra estado en DB (sent / failed).

A√±adir supervisor/systemd (documental) o un script supervisor para mantener worker vivo en producci√≥n.

Opcional (avanzado):

Priorizar colas, usar exchanges/queues binding, y supervisar con management UI.

Bloque Final ‚Äî Conceptos de Infraestructura √∫tiles (appendix)
Este bloque es resumen informativo para darte visi√≥n general del ecosistema que ver√°s en empresas.

Supervisor / systemd
Qu√© hacen: mantener procesos (workers) en ejecuci√≥n y reiniciarlos si fallan.

En producci√≥n: colocar supervisor o systemd sobre messenger:consume.

ElasticSearch
Uso: b√∫squedas full-text, sugerencias, facets.

Uso t√≠pico: indexar art√≠culos para b√∫squedas r√°pidas y relevantes.

Prometheus + Grafana
Prometheus (scrape metrics), Grafana (visualizaci√≥n).

M√©tricas √∫tiles: queue_length, worker_errors, request_latency, memory_usage.

Kubernetes (K8s) ‚Äî panorama general
Orquestador para contenedores: deployments, services, ingress.

No es urgente aprenderlo todo, pero entender pods, services y deployments ayuda.

CI/CD (GitHub Actions, GitLab CI, Jenkins)
Pipelines autom√°ticos: test ‚Üí build ‚Üí release ‚Üí deploy.

Practica: crear pipeline que ejecute tests y build de imagen.

Otros servicios que podr√≠as ver en empresas
Redis (cache, sessions, rate-limiting). Ya integrado en el plan.

RabbitMQ (mensajer√≠a) ‚Äî incluido en Semana 25.

ElasticSearch (b√∫squeda) ‚Äî opcional a futuro.

Sentry (errores y reporting) ‚Äî integrar cliente SDK es f√°cil y √∫til.

Recursos recurrentes y herramientas recomendadas
Symfony docs ‚Äî https://symfony.com/doc/current/index.html

PHP The Right Way ‚Äî https://phptherightway.com/

Docker docs ‚Äî https://docs.docker.com/

OWASP & Cheatsheets ‚Äî https://cheatsheetseries.owasp.org/

Vue 3 Guide ‚Äî https://vuejs.org/guide/introduction.html

Refactoring.Guru ‚Äî https://refactoring.guru/

GitHub Actions docs ‚Äî https://docs.github.com/en/actions

Herramientas de desarrollo:

VS Code (con Xdebug extension), Docker Desktop / OrbStack, Postman/Insomnia, MySQL Workbench (o TablePlus), Redis CLI, Git.

Mini-proyectos y retos opcionales (por niveles)
Nivel b√°sico: Blog CRUD (mes 1).

Nivel intermedio: Dockerizar Blog + CI que corre tests (mes 2‚Äì6).

Nivel avanzado: A√±adir mensajer√≠a para env√≠os (Semana 25), b√∫squeda con ElasticSearch o integraci√≥n con un microservicio.

Extra ninja: Deploy en k8s m√≠nimo o integraci√≥n completa con Prometheus/Grafana.

Checklist final (usa esto cada mes)
 Mes 1 completado: Symfony b√°sico + CRUD

 Mes 2 completado: Docker + local env

 Mes 3 completado: Arquitectura y patrones

 Mes 4 completado: Testing + Seguridad

 Mes 5 completado: API + Twig/Vue

 Mes 6 completado: DevOps b√°sico + despliegue

 Semana 25 completada: RabbitMQ + Messenger

 README + documentaci√≥n del proyecto final completada

Notas finales
Ritmo: 1‚Äì2 h/d√≠a significa que algunas semanas las tareas opcionales las dejar√°s para el finde; es normal.

Revisi√≥n conjunta: Si quieres, cuando completes alg√∫n mini-proyecto o m√≥dulo me lo pasas (link a GitHub) y lo revisamos juntas.

Formato: este .md es totalmente editable; adapta tiempos, mueve semanas y mete temario del m√°ster si lo empiezas en enero.
